---
export const prerender = false;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Website Builder</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    .page-card {
      transition: transform 0.2s;
      cursor: pointer;
    }
    .page-card:hover {
      transform: translateY(-5px);
    }
    .create-page-card {
      border: 2px dashed #dee2e6;
      background-color: #f8f9fa;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 200px;
    }
    .create-page-card:hover {
      border-color: #0d6efd;
      background-color: #e7f3ff;
    }
    .template-card {
      cursor: pointer;
      transition: all 0.2s;
      border: 2px solid transparent;
    }
    .template-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .template-card.selected {
      border-color: #0d6efd;
      background-color: #e7f3ff;
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <div class="row">
      <div class="col-12">
        <h1 class="mb-4">Website Builder</h1>
        <p class="lead">Select a site to manage or create a new one</p>
      </div>
    </div>

    <!-- Loading State -->
    <div id="loading" class="text-center">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>

    <!-- Error State -->
    <div id="error" class="alert alert-danger d-none" role="alert">
      <h4 class="alert-heading">Error!</h4>
      <p id="error-message"></p>
    </div>

    <!-- No Sites State -->
    <div id="no-sites-state" class="text-center d-none">
      <div class="card create-page-card mx-auto" style="max-width: 400px;" onclick="createNewSite()">
        <div class="card-body">
          <i class="bi bi-globe" style="font-size: 3rem; color: #6c757d;"></i>
          <h5 class="card-title mt-3">Create Your First Site</h5>
          <p class="card-text text-muted">Get started by creating a new website</p>
        </div>
      </div>
    </div>

    <!-- Sites Grid -->
    <div id="sites-grid" class="row g-4 d-none">
      <!-- Sites will be populated here -->
    </div>

    <!-- Pages Grid -->
    <div id="pages-grid" class="row g-4 d-none">
      <!-- Create New Page Card -->
      <div class="col-md-6 col-lg-4">
        <div class="card create-page-card h-100" onclick="createNewPage()">
          <div class="card-body text-center">
            <i class="bi bi-plus-circle" style="font-size: 3rem; color: #6c757d;"></i>
            <h5 class="card-title mt-3">Create New Page</h5>
            <p class="card-text text-muted">Start building a new webpage</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Site Modal -->
    <div class="modal fade" id="createSiteModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Create New Site</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="createSiteForm" onsubmit="submitCreateSite(); return false;">
              <div class="mb-3">
                <label for="siteName" class="form-label">Site Name</label>
                <input type="text" class="form-control" id="siteName" required oninput="validateSiteForm()">
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="createSiteButton" onclick="submitCreateSite()" disabled>Create Site</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Page Modal -->
    <div class="modal fade" id="createPageModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Create New Page</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="createPageForm" onsubmit="submitCreatePage(); return false;">
              <div class="mb-3">
                <label for="pageName" class="form-label">Page Name</label>
                <input type="text" class="form-control" id="pageName" required oninput="validatePageForm()">
              </div>
              <div class="mb-3">
                <label class="form-label">Select Template</label>
                <div class="row g-3" id="templateSelection">
                  <div class="col-md-6">
                    <div class="card template-card" data-template="one_page_website" onclick="selectTemplate('one_page_website', this)">
                      <div class="card-body text-center">
                        <i class="bi bi-layout-text-window-reverse" style="font-size: 2rem; color: #0d6efd;"></i>
                        <h6 class="card-title mt-2">One Page Website</h6>
                        <p class="card-text text-muted small">Complete single-page website layout</p>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="card template-card" data-template="blank" onclick="selectTemplate('blank', this)">
                      <div class="card-body text-center">
                        <i class="bi bi-file-earmark" style="font-size: 2rem; color: #6c757d;"></i>
                        <h6 class="card-title mt-2">Blank Page</h6>
                        <p class="card-text text-muted small">Start with an empty page</p>
                      </div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="selectedTemplate" value="">
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="createPageButton" onclick="submitCreatePage()" disabled>Create Page</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script type="module">
    import { api } from '/services/api.js';

    let currentSiteId = null;

    async function loadSites() {
      try {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('error').classList.add('d-none');
        hideAllContentSections();

        // Fetch sites
        console.log('Fetching sites...');
        const response = await api.getSites();
        console.log('Sites response:', response);
        
        const sites = response.sites || [];
        
        if (!sites || sites.length === 0) {
          // Show create new site interface
          document.getElementById('loading').style.display = 'none';
          document.getElementById('no-sites-state').classList.remove('d-none');
        } else {
          // Show sites grid
          renderSites(sites);
          document.getElementById('loading').style.display = 'none';
          document.getElementById('sites-grid').classList.remove('d-none');
        }
      } catch (error) {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('error').classList.remove('d-none');
        document.getElementById('error-message').textContent = error.message;
      }
    }

    async function loadPages(siteId) {
      try {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('error').classList.add('d-none');
        hideAllContentSections();

        currentSiteId = siteId;

        // Load site info and pages
        const [siteResponse, pagesResponse] = await Promise.all([
          api.getSite(currentSiteId),
          api.getPages(currentSiteId)
        ]);
        
        const site = siteResponse.site || siteResponse;
        const pages = pagesResponse.pages || [];
        console.log('Loaded pages:', pages);
        renderPages(pages, site);
        
        document.getElementById('loading').style.display = 'none';
        document.getElementById('pages-grid').classList.remove('d-none');
      } catch (error) {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('error').classList.remove('d-none');
        document.getElementById('error-message').textContent = error.message;
      }
    }

    function hideAllContentSections() {
      document.getElementById('no-sites-state').classList.add('d-none');
      document.getElementById('sites-grid').classList.add('d-none');
      document.getElementById('pages-grid').classList.add('d-none');
    }

    function renderSites(sites) {
      const grid = document.getElementById('sites-grid');
      grid.innerHTML = '';

      // Add create new site card
      const createSiteCard = document.createElement('div');
      createSiteCard.className = 'col-md-6 col-lg-4';
      createSiteCard.innerHTML = `
        <div class="card create-page-card h-100" onclick="createNewSite()">
          <div class="card-body text-center">
            <i class="bi bi-plus-circle" style="font-size: 3rem; color: #6c757d;"></i>
            <h5 class="card-title mt-3">Create New Site</h5>
            <p class="card-text text-muted">Start a new website project</p>
          </div>
        </div>
      `;
      grid.appendChild(createSiteCard);

      sites.forEach(site => {
        const siteCard = document.createElement('div');
        siteCard.className = 'col-md-6 col-lg-4';
        siteCard.innerHTML = `
          <div class="card page-card h-100" onclick="selectSite('${site.id}')">
            <div class="card-body">
              <h5 class="card-title">${escapeHtml(site.name)}</h5>
              <p class="card-text text-muted">
                Last updated: ${new Date(site.updated_at).toLocaleDateString()}
              </p>
              <div class="mt-auto">
                <button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); selectSite('${site.id}')">
                  Manage Pages
                </button>
                <button class="btn btn-outline-danger btn-sm ms-2" onclick="event.stopPropagation(); deleteSite('${site.id}')">
                  Delete
                </button>
              </div>
            </div>
          </div>
        `;
        grid.appendChild(siteCard);
      });
    }

    function renderPages(pages, site) {
      const grid = document.getElementById('pages-grid');
      grid.innerHTML = '';

      // Add site header and back button
      const headerSection = document.createElement('div');
      headerSection.className = 'col-12 mb-4';
      headerSection.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <h2 class="mb-1">${escapeHtml(site.name)}</h2>
            <p class="text-muted mb-0">Manage pages for this site</p>
          </div>
          <button class="btn btn-outline-secondary" onclick="backToSites()">
            <i class="bi bi-arrow-left"></i> Back to Sites
          </button>
        </div>
      `;
      grid.appendChild(headerSection);

      // Add create new page card
      const createPageCard = document.createElement('div');
      createPageCard.className = 'col-md-6 col-lg-4';
      createPageCard.innerHTML = `
        <div class="card create-page-card h-100" onclick="createNewPage()">
          <div class="card-body text-center">
            <i class="bi bi-plus-circle" style="font-size: 3rem; color: #6c757d;"></i>
            <h5 class="card-title mt-3">Create New Page</h5>
            <p class="card-text text-muted">Start building a new webpage</p>
          </div>
        </div>
      `;
      grid.appendChild(createPageCard);

      pages.forEach(page => {
        console.log('Rendering page:', page);
        const pageCard = document.createElement('div');
        pageCard.className = 'col-md-6 col-lg-4';
        
        // Use page.name if available, otherwise use page.id as the display name
        const displayName = page.name || page.id || 'Untitled Page';
        // Check for both updated_at and modified_at fields
        const lastModified = page.updated_at || page.modified_at;
        
        pageCard.innerHTML = `
          <div class="card page-card h-100" onclick="editPage('${page.id}')">
            <div class="card-body">
              <h5 class="card-title">${escapeHtml(displayName)}</h5>
              <p class="card-text text-muted">
                Last updated: ${lastModified ? new Date(lastModified).toLocaleDateString() : 'Never'}
              </p>
              <div class="mt-auto">
                <button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); editPage('${page.id}')">
                  Edit
                </button>
                <button class="btn btn-outline-danger btn-sm ms-2" onclick="event.stopPropagation(); deletePage('${page.id}')">
                  Delete
                </button>
              </div>
            </div>
          </div>
        `;
        grid.appendChild(pageCard);
      });
    }

    // Site Management Functions
    window.createNewSite = function() {
      const modal = new bootstrap.Modal(document.getElementById('createSiteModal'));
      modal.show();
      // Reset form and validation
      document.getElementById('siteName').value = '';
      validateSiteForm();
    }

    window.validateSiteForm = function() {
      const siteName = document.getElementById('siteName').value.trim();
      const button = document.getElementById('createSiteButton');
      button.disabled = !siteName;
    }

    window.submitCreateSite = async function() {
      const siteName = document.getElementById('siteName').value.trim();
      if (!siteName) return;

      try {
        const site = await api.createSite({ name: siteName });
        const modal = bootstrap.Modal.getInstance(document.getElementById('createSiteModal'));
        modal.hide();
        document.getElementById('siteName').value = '';
        loadSites(); // Refresh the sites list
      } catch (error) {
        alert('Error creating site: ' + error.message);
      }
    }

    window.selectSite = function(siteId) {
      loadPages(siteId);
    }

    window.deleteSite = async function(siteId) {
      if (!confirm('Are you sure you want to delete this site and all its pages?')) return;
      
      try {
        await api.deleteSite(siteId);
        loadSites(); // Refresh the sites list
      } catch (error) {
        alert('Error deleting site: ' + error.message);
      }
    }

    window.backToSites = function() {
      currentSiteId = null;
      loadSites();
    }

    // Page Management Functions
    window.createNewPage = function() {
      const modal = new bootstrap.Modal(document.getElementById('createPageModal'));
      modal.show();
      // Reset form and validation
      document.getElementById('pageName').value = '';
      document.getElementById('selectedTemplate').value = '';
      // Clear template selections
      document.querySelectorAll('.template-card').forEach(card => {
        card.classList.remove('selected');
      });
      validatePageForm();
    }

    window.selectTemplate = function(templateId, cardElement) {
      // Clear previous selections
      document.querySelectorAll('.template-card').forEach(card => {
        card.classList.remove('selected');
      });
      
      // Select this template
      cardElement.classList.add('selected');
      document.getElementById('selectedTemplate').value = templateId;
      
      // Revalidate form
      validatePageForm();
    }

    window.validatePageForm = function() {
      const pageName = document.getElementById('pageName').value.trim();
      const selectedTemplate = document.getElementById('selectedTemplate').value;
      const button = document.getElementById('createPageButton');
      
      // Enable button only if both name and template are selected
      button.disabled = !pageName || !selectedTemplate;
    }

    window.submitCreatePage = async function() {
      const pageName = document.getElementById('pageName').value.trim();
      const selectedTemplate = document.getElementById('selectedTemplate').value;
      
      if (!pageName || !selectedTemplate) return;

      try {
        const pageData = {
          name: pageName,
          template: selectedTemplate
        };
        
        await api.createPage(currentSiteId, pageData);
        const modal = bootstrap.Modal.getInstance(document.getElementById('createPageModal'));
        modal.hide();
        
        // Reset form
        document.getElementById('pageName').value = '';
        document.getElementById('selectedTemplate').value = '';
        document.querySelectorAll('.template-card').forEach(card => {
          card.classList.remove('selected');
        });
        
        loadPages(currentSiteId); // Refresh the page list
      } catch (error) {
        alert('Error creating page: ' + error.message);
      }
    }

    window.editPage = function(pageId) {
      window.location.href = `/editor?site=${currentSiteId}&page=${pageId}`;
    }

    window.deletePage = async function(pageId) {
      if (!confirm('Are you sure you want to delete this page?')) return;
      
      try {
        await api.deletePage(currentSiteId, pageId);
        loadPages(currentSiteId); // Refresh the page list
      } catch (error) {
        alert('Error deleting page: ' + error.message);
      }
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Check URL parameters and load appropriate content
    const urlParams = new URLSearchParams(window.location.search);
    const siteId = urlParams.get('site');
    
    if (siteId) {
      // Load pages for specific site
      loadPages(siteId);
    } else {
      // Load sites list
      loadSites();
    }
  </script>
</body>
</html>
