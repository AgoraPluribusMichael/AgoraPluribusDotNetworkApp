---
export const prerender = false;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Page Editor</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    #editor-container {
      height: calc(100vh - 120px);
      border: 1px solid #dee2e6;
      border-radius: 0.375rem;
    }
    .editor-textarea {
      width: 100%;
      height: 100%;
      border: none;
      outline: none;
      resize: none;
      font-family: 'Courier New', monospace;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
      <a class="navbar-brand" href="/">
        <i class="bi bi-arrow-left"></i> Back to Pages
      </a>
      <div class="navbar-nav ms-auto">
        <button class="btn btn-primary" onclick="savePage()">
          <i class="bi bi-save"></i> Save
        </button>
      </div>
    </div>
  </nav>

  <div class="container mt-4">
    <!-- Loading State -->
    <div id="loading" class="text-center">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>

    <!-- Error State -->
    <div id="error" class="alert alert-danger d-none" role="alert">
      <h4 class="alert-heading">Error!</h4>
      <p id="error-message"></p>
    </div>

    <!-- Editor -->
    <div id="editor-section" class="d-none">
      <div class="row mb-3">
        <div class="col-12">
          <h1 id="page-title">Loading...</h1>
          <p class="text-muted" id="site-name">Site: Loading...</p>
        </div>
      </div>

      <div class="row">
        <div class="col-12">
          <div id="editor-container">
            <div id="preview-content" style="display: none; border: 1px solid #dee2e6; padding: 1rem; min-height: 400px; background: white; border-radius: 8px;"></div>
          </div>
        </div>
      </div>
    </div>

  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script type="module">
    import { api } from '/services/api.js';

    let currentSiteId = null;
    let currentPageId = null;
    let currentSiteName = '';
    let currentPageName = '';

    async function loadEditor() {
      try {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('error').classList.add('d-none');
        document.getElementById('editor-section').classList.add('d-none');

        // Get URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        currentSiteId = urlParams.get('site');
        currentPageId = urlParams.get('page');

        if (!currentSiteId || !currentPageId) {
          throw new Error('Missing site or page ID in URL');
        }

        // Load site and page data
        const [siteResponse, pageResponse] = await Promise.all([
          api.getSite(currentSiteId),
          api.getPage(currentSiteId, currentPageId)
        ]);

        const site = siteResponse.site || siteResponse;
        const page = pageResponse.page || pageResponse;

        currentSiteName = site.name;
        currentPageName = page.id;

        // Update UI
        const displayPageName = page.id || 'Untitled Page';
        document.getElementById('page-title').textContent = `Page Editor`;
        document.getElementById('site-name').textContent = `${site.name} > ${displayPageName}`;
        document.getElementById('page-content').value = page.content || '';

        // Update navbar back link
        document.querySelector('.navbar-brand').onclick = function(e) {
          e.preventDefault();
          window.location.href = `/?site=${currentSiteId}`;
        };

        document.getElementById('loading').style.display = 'none';
        document.getElementById('editor-section').classList.remove('d-none');
      } catch (error) {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('error').classList.remove('d-none');
        document.getElementById('error-message').textContent = error.message;
      }
    }

    window.savePage = async function() {
      try {
        const content = document.getElementById('page-content').value;
        await api.updatePage(currentSiteId, currentPageId, { content });
        
        // Show success feedback
        const saveBtn = document.querySelector('[onclick="savePage()"]');
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i class="bi bi-check"></i> Saved!';
        saveBtn.classList.remove('btn-primary');
        saveBtn.classList.add('btn-success');
        
        setTimeout(() => {
          saveBtn.innerHTML = originalText;
          saveBtn.classList.remove('btn-success');
          saveBtn.classList.add('btn-primary');
        }, 2000);
      } catch (error) {
        alert('Error saving page: ' + error.message);
      }
    }

    window.insertText = function(startTag, endTag) {
      const textarea = document.getElementById('page-content');
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = textarea.value.substring(start, end);
      
      const newText = startTag + selectedText + endTag;
      textarea.value = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
      
      // Set cursor position
      const newCursorPos = start + startTag.length + selectedText.length;
      textarea.setSelectionRange(newCursorPos, newCursorPos);
      textarea.focus();
    }

    // Load editor when page loads
    loadEditor();
  </script>
</body>
</html>